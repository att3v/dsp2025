import json
import logging
import os
import signal
import sys
from uuid import uuid4

from cassandra.cluster import Cluster
from confluent_kafka import Consumer

KAFKA_BORKER = os.getenv("KAFKA_BROKER", "locahost:9092")
KAFKA_TOPIC = "cve_data"
CASSANDRA_HOSTS = ["10.36.0.2", "10.10.1.48"]

consumer = Consumer(
    {
        "bootstrap.servers": KAFKA_BORKER,
        "group.id": "cve_consumer",
        "auto.offset.reset": "earliest",
    }
)
logging.basicConfig(
    stream=sys.stdout,
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler(sys.stdout)],
)

cassandra_cluster = Cluster(CASSANDRA_HOSTS)
session = cassandra_cluster.connect()
session.set_keyspace("threat_intelligence")

consumer.subscribe([KAFKA_TOPIC])
logging.info(f"Consumer initialized and subscribed to topic: {KAFKA_TOPIC}")


def graceful_shutdown():
    logging.info("Shutting down consumer...")
    if consumer:
        consumer.close()
    exit(0)


signal.signal(signal.SIGTERM, graceful_shutdown)
signal.signal(signal.SIGINT, graceful_shutdown)


def poll_for_messages():
    logging.info("Consumer started polling for messages...")
    while True:
        msg = consumer.poll(timeout=2.0)
        if not msg:
            continue
        if msg.error():
            logging.error(f"Error processing message: {msg.error()}")
            continue

        logging.info(f"Message received: {msg.value().decode('utf-8')}")
        process_message(msg)


def process_message(msg):
    cve_data = json.loads(msg.value())
    cve_id = cve_data["cve_id"]
    timestamp = cve_data["timestamp"]
    lastmodified = cve_data["lastmodified"]
    baseScore = cve_data["baseScore"]
    severity = cve_data["severity"]
    description = cve_data["description"]
    source = cve_data["source"]
    status = cve_data["status"]

    insert_cve_data(
        cve_id,
        timestamp,
        lastmodified,
        baseScore,
        severity,
        description,
        source,
        status,
    )


def insert_cve_data(
    cve_id, timestamp, lastmodified, baseScore, severity, description, source, status
):
    cassandra_q = f"""
        INSERT INTO vulnerabilities (id, cve, timestamp, lastmodified, basescore, severity, description, source, status)
        VALUES ('{cve_id}', '{timestamp}', '{lastmodified}', {baseScore}, '{severity}', '{description}', '{source}', '{status}');
    """
    try:
        session.execute(
            cassandra_q,
            (
                uuid4(),
                cve_id,
                timestamp,
                lastmodified,
                baseScore,
                severity,
                description,
                source,
                status,
            ),
        )
    except Exception as e:
        logging.error(f"Failed to insert data into Cassandra: {e}")


if __name__ == "__main__":
    poll_for_messages()
